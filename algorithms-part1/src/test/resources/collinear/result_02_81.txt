See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  28/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 80.98%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Jan 29 07:48 BruteCollinearPoints.java
2.8K Jan 29 07:48 FastCollinearPoints.java
 432 Jan 29 07:48 LineSegment.java
5.8K Jan 29 07:48 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 149]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 32]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 34]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:33:34: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] Point.java:12:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt
  * filename = input48.txt
==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt
  * filename = input48.txt
==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:107)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt
  * filename = input48.txt

It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:429)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:545)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:566)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3

    BruteCollinearPoints.compute(BruteCollinearPoints.java:36)
    BruteCollinearPoints.<init>(BruteCollinearPoints.java:23)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:573)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:605)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> FAILED

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 11/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
  * filename = input299.txt
==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2000, 2000) -> (9000, 9000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 5 extra entries in student solution, including:
      '(6000, 6000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (2000, 22000) -> (4000, 30000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 1 extra entry in student solution:
      '(2000, 22000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5120, 20992) -> (8128, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - number of entries in student   solution: 8
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including:
      '(5120, 29184) -> (8192, 29184)'

    - 1 missing entry in student solution:
      '(4096, 20992) -> (4096, 22016) -> (4096, 23040) -> (4096, 24064) -> (4096, 25088)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (1000, 9000) -> (1000, 26000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 7
    - 2 extra entries in student solution, including:
      '(18000, 23000) -> (18000, 30000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 14: (16000, 6000) -> (1000, 21000)
    - reference segment 2: (17000, 5000) -> (16000, 6000) -> (12000, 10000) -> (9000, 13000) -> (1000, 21000)

    - number of entries in student   solution: 34
    - number of entries in reference solution: 31
    - 10 extra entries in student solution, including:
      '(8000, 23000) -> (30000, 23000)'

    - 7 missing entries in student solution, including:
      '(30000, 12000) -> (26000, 13000) -> (22000, 14000) -> (14000, 16000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 5: (7300, 10450) -> (7300, 31650)
    - reference segment 5: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)

    - number of entries in student   solution: 7
    - number of entries in reference solution: 6
    - 1 extra entry in student solution:
      '(7300, 10450) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5000, 0) -> (30000, 0)
    - reference segment 1: (0, 0) -> (5000, 0) -> (10000, 0) -> (15000, 0) -> (20000, 0) -> (25000, 0) -> (30000, 0)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 5
    - 10 extra entries in student solution, including:
      '(0, 15000) -> (0, 30000)'

    - 3 missing entries in student solution, including:
      '(5000, 0) -> (10000, 3100) -> (15000, 6200) -> (20000, 9300) -> (25000, 12400)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (10470, 316) -> (9837, 685)
    - reference segment 69: (10681, 193) -> (10470, 316) -> (10259, 439) -> (10048, 562) -> (9837, 685)

    - number of entries in student   solution: 609
    - number of entries in reference solution: 288
    - 353 extra entries in student solution, including:
      '(13180, 30413) -> (14764, 30467)'

    - 32 missing entries in student solution, including:
      '(18496, 29267) -> (18725, 29391) -> (18954, 29515) -> (19183, 29639) -> (19412, 29763)'


  * filename = rs1423.txt
    - number of entries in student   solution: 398
    - number of entries in reference solution: 443
    - 45 missing entries in student solution, including:
      '(10605, 27507) -> (11161, 27643) -> (11717, 27779) -> (12273, 27915)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
  * filename = input299.txt
==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)'


  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt

It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 3) -> (7, 3)
    - reference segment 0: (0, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (7, 3)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(2, 3) -> (7, 3)'


    - failed on trial 271 of 500
     5
         3     3
         4     3
         0     3
         7     3
         2     3

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 1
    - number of entries in reference solution: 2
    - 1 missing entry in student solution:
      '(3, 1) -> (3, 2) -> (3, 8) -> (3, 9)'


    - failed on trial 41 of 500
     10
         4     5
         1     8
         3     2
         5     3
         3     1
         4     2
         2     7
         3     8
         3     9
         6     4

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (8, 0)
    - reference segment 16: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (7, 0) -> (8, 0)

    - number of entries in student   solution: 37
    - number of entries in reference solution: 43
    - 17 extra entries in student solution, including:
      '(4, 8) -> (9, 8)'

    - 23 missing entries in student solution, including:
      '(8, 4) -> (4, 6) -> (2, 7) -> (0, 8)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (9, 0)
    - reference segment 57: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 81
    - number of entries in reference solution: 132
    - 53 extra entries in student solution, including:
      '(6, 9) -> (9, 9)'

    - 104 missing entries in student solution, including:
      '(8, 6) -> (6, 7) -> (4, 8) -> (2, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 11: (24, 3) -> (4, 23)
    - reference segment 27: (26, 1) -> (24, 3) -> (23, 4) -> (12, 15) -> (4, 23)

    - number of entries in student   solution: 149
    - number of entries in reference solution: 206
    - 67 extra entries in student solution, including:
      '(17, 49) -> (38, 49)'

    - 124 missing entries in student solution, including:
      '(6, 35) -> (12, 37) -> (42, 47) -> (45, 48)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 7
    - number of entries in reference solution: 10
    - 3 missing entries in student solution, including:
      '(3, 0) -> (3, 1) -> (3, 2) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (4, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 16
    - 7 extra entries in student solution, including:
      '(1, 4) -> (4, 4)'

    - 7 missing entries in student solution, including:
      '(0, 1) -> (1, 2) -> (2, 3) -> (3, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (9, 0)
    - reference segment 67: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 91
    - number of entries in reference solution: 154
    - 62 extra entries in student solution, including:
      '(6, 9) -> (9, 9)'

    - 125 missing entries in student solution, including:
      '(9, 6) -> (7, 7) -> (5, 8) -> (3, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (19, 0)
    - reference segment 1203: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0)

    - number of entries in student   solution: 391
    - number of entries in reference solution: 2446
    - 274 extra entries in student solution, including:
      '(16, 19) -> (19, 19)'

    - 2329 missing entries in student solution, including:
      '(19, 16) -> (17, 17) -> (15, 18) -> (13, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (4, 0)
    - reference segment 2: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 11
    - number of entries in reference solution: 13
    - 4 extra entries in student solution, including:
      '(1, 3) -> (4, 3)'

    - 6 missing entries in student solution, including:
      '(4, 0) -> (4, 1) -> (4, 2) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (5, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 16
    - 8 extra entries in student solution, including:
      '(2, 3) -> (5, 3)'

    - 9 missing entries in student solution, including:
      '(5, 0) -> (5, 1) -> (5, 2) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (9, 0)
    - reference segment 12: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 31
    - number of entries in reference solution: 38
    - 20 extra entries in student solution, including:
      '(6, 3) -> (9, 3)'

    - 27 missing entries in student solution, including:
      '(9, 0) -> (9, 1) -> (9, 2) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (14, 0)
    - reference segment 30: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0)

    - number of entries in student   solution: 51
    - number of entries in reference solution: 79
    - 35 extra entries in student solution, including:
      '(11, 3) -> (14, 3)'

    - 63 missing entries in student solution, including:
      '(14, 0) -> (14, 1) -> (14, 2) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1, 0) -> (24, 0)
    - reference segment 92: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0) -> (20, 0) -> (21, 0) -> (22, 0) -> (23, 0) -> (24, 0)

    - number of entries in student   solution: 91
    - number of entries in reference solution: 213
    - 65 extra entries in student solution, including:
      '(21, 3) -> (24, 3)'

    - 187 missing entries in student solution, including:
      '(24, 0) -> (24, 1) -> (24, 2) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 14/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         561           0            561                   46
=> passed    32   0.00        4961           0           4961                  122
=> passed    64   0.00       41665           0          41665                  302
=> passed   128   0.01      341377           0         341377                  736
=> passed   256   0.02     2763521           0        2763521                 1721
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         629           0            629                   47
=> passed    32   0.00        5309           0           5309                  122
=> passed    64   0.00       43314           0          43314                  309
=> passed   128   0.00      348078           0         348078                  745
=> passed   256   0.03     2790656           0        2790656                 1725
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2143        7993          18129                 8415
=> passed   128   0.01        8383       39359          87101                40653
=> passed   256   0.02       33151      187741         408633               189749
=> passed   512   0.09      131839      867132        1866103               875842
=> passed  1024   0.34      525823     3958389        8442601              3986893
=> passed  2048   0.72     2100223    17859984       37820191             17974023
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (37820191 / 8442601) = 2.16
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2143        1953           6049                 2257
=> passed   128   0.00        8383        8001          24385                 8735
=> passed   256   0.00       33151       32385          97921                34104
=> passed   512   0.00      131839      130305         392449               134276
=> passed  1024   0.01      525823      522753        1571329               531723
=> passed  2048   0.06     2100223     2094081        6288385              2114077
=> passed  4096   0.12     8394751     8382465       25159681              8426520
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (25159681 / 6288385) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        1036        6976          14988                 7699
=> passed   128   0.00        3612       26477          56566                32469
=> passed   256   0.00       13372       69828         153028               117568
=> passed   512   0.01       51324      245904         543132               437449
=> passed  1024   0.03      200956      927950        2056856              1678864
=> passed  2048   0.11      795132     3607527        8010186              6581999
=> passed  4096   0.46     3163132    14220882       31604896             26016043
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (31604896 / 8010186) = 1.98
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00         783        7701          16185                 8233
=> passed   128   0.00        2055       35866          73787                38882
=> passed   256   0.00        5751      127120         259991               164072
=> passed   512   0.01       17751      385258         788267               641182
=> passed  1024   0.05       60183     1438626        2937435              2481130
=> passed  2048   0.18      218775     5568217       11355209              9739704
=> passed  4096   0.87      830871    21899886       44630643             38530420
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (44630643 / 11355209) = 1.97
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================