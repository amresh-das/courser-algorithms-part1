See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (4 warnings)
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  38/41 tests passed
Memory:       1/1 tests passed
Timing:       25/41 tests passed

Aggregate score: 87.80%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Jan 30 22:07 BruteCollinearPoints.java
3.5K Jan 30 22:07 FastCollinearPoints.java
 451 Jan 30 22:07 LineSegment.java
5.7K Jan 30 22:07 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 146]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 32]
M D UP_UNUSED_PARAMETER UP: Static or private method FastCollinearPoints.addUnique(Point, Point, Point, int) has unused parameters  At FastCollinearPoints.java:[lines 54-67]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 35]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------
FastCollinearPoints.java:53: Avoid unused parameter variables, such as 'streak'. [UnusedFormalParameter]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:33:34: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 25 out of bounds for length 25

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:446)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 45 out of bounds for length 45

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:447)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 100 out of bounds for length 100

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:461)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 5-by-5 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 12 out of bounds for length 12

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:462)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 50 out of bounds for length 50

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:463)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 20-by-20 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 200 out of bounds for length 200

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 5-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 10

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:39)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 6-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 12 out of bounds for length 12

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:466)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 10-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 20 out of bounds for length 20

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:467)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 15-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 30 out of bounds for length 30

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:468)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 25-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 50 out of bounds for length 50

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 6 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 15 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          collinear.segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.segments()
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 18/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         561           0            561                   46
=> passed    32   0.00        4961           0           4961                  120
=> passed    64   0.00       41665           0          41665                  302
=> passed   128   0.01      341377           0         341377                  733
=> passed   256   0.02     2763521           0        2763521                 1741
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         638           0            638                   45
=> passed    32   0.00        5357           0           5357                  126
=> passed    64   0.00       43134           0          43134                  301
=> passed   128   0.00      347655           0         347655                  743
=> passed   256   0.03     2789690           0        2789690                 1732
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        4159       18803          41765                18851
=> passed   128   0.01       16511       89618         195747                90420
=> passed   256   0.07       65791      414686         895163               416910
=> passed   512   0.33      262655     1896778        4056211              1901470
=> passed  1024   0.43     1049599     8546477       18142553              8549012
=> passed  2048   1.31     4196351    38109504       80415359             38187954
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (80415359 / 18142553) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        4159        4764          13687                 7306
=> passed   128   0.00       16511       17796          52103                23484
=> passed   256   0.00       65791       68717         203225                80833
=> passed   512   0.02      262655      269399         801453               294613
=> passed  1024   0.05     1049599     1065026        3179651              1116997
=> passed  2048   0.15     4196351     4231214       12658779              4337728
=> passed  4096   0.36    16781311    16859163       50499637             17076719
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (50499637 / 12658779) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 32 out of bounds for length 32

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 32 out of bounds for length 32

    FastCollinearPoints.addUnique(FastCollinearPoints.java:65)
    FastCollinearPoints.compute(FastCollinearPoints.java:47)
    FastCollinearPoints.<init>(FastCollinearPoints.java:23)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 15/31 tests passed!


================================================================