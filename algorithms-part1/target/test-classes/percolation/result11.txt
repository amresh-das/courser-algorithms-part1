See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  22/33 tests passed
Memory:       4/8 tests passed
Timing:       4/20 tests passed

Aggregate score: 59.00%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.3K Jan 19 07:16 percolation.Percolation.java
2.3K Jan 19 07:16 percolation.PercolationStats.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 percolation.Percolation.java
*-----------------------------------------------------------

% javac11 percolation.PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
percolation.Percolation:

percolation.PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for percolation.Percolation.java
*-----------------------------------------------------------

% custom checkstyle checks for percolation.PercolationStats.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of percolation.Percolation
*-----------------------------------------------------------
Running 18 total tests.

Tests 1 through 8 create a percolation.Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Tests 11 through 14 create a percolation.Percolation object using your code, then repeatedly
call the methods open(), isOpen(), isFull(), percolates(), and, numberOfOpenSites()
in random order with probabilities p = (p1, p2, p3, p4, p5). The tests stop
immediately after the system percolates.

Tests 16 through 18 test backwash.

Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - percolates() returns wrong value after 18 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> FAILED

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
    - percolates() returns wrong value after 1 site opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input1-no.txt
  * filename = input2.txt
    - percolates() returns wrong value after 3 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input2-no.txt
==> FAILED

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
    - percolates() returns wrong value after 85 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = snake101.txt
    - percolates() returns wrong value after 5101 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 5: open every site
  * filename = input5.txt
    - percolates() returns wrong value after 21 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 6: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 7: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==> passed

Test 8: call constructor with invalid argument
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 9: create multiple percolation.Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==> passed

Test 10: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 11: call open(), isOpen(), and numberOfOpenSites()
         in random order until system percolates
  * n = 3, trials = 40, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 5, trials = 20, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 7, trials = 10, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 10, trials = 5, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 20, trials = 2, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 50, trials = 1, p = (0.4, 0.4, 0.0, 0.0, 0.3)
==> passed

Test 12: call open() and percolates() in random order until system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 40
    - sequence of operations was:
         percolation.open(3, 2)
         percolation.percolates()
         percolation.open(1, 1)
         percolation.open(2, 3)
         percolation.percolates()
         percolation.percolates()
         percolation.percolates()
         percolation.percolates()
         percolation.percolates()
         percolation.open(2, 2)
         percolation.open(3, 1)
         percolation.open(2, 1)
         percolation.percolates()

  * n = 5, trials = 20, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 16 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 20

  * n = 7, trials = 10, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 25 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 59 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20, trials = 2, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 249 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50, trials = 1, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 1503 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED

Test 13: call open() and isFull() in random order until system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 5, trials = 20, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 7, trials = 10, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 10, trials = 5, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 20, trials = 2, p = (0.5, 0.0, 0.5, 0.0, 0.0)
  * n = 50, trials = 1, p = (0.5, 0.0, 0.5, 0.0, 0.0)
==> passed

Test 14: call all methods in random order until system percolates
  * n = 3, trials = 40, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 40

  * n = 5, trials = 20, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 17 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 20

  * n = 7, trials = 10, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 20 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 48 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20, trials = 2, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 259 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50, trials = 1, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 1448 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED

Test 15: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
    - percolates() returns wrong value after 4 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 40

  * n = 5
    - percolates() returns wrong value after 15 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 10 of 20

  * n = 7
    - percolates() returns wrong value after 41 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10
    - percolates() returns wrong value after 76 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20
    - percolates() returns wrong value after 246 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50
==> FAILED

Test 16: check for backwash with predetermined sites
  * filename = input20.txt
    - percolates() returns wrong value after 204 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input10.txt
    - percolates() returns wrong value after 56 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input50.txt
    - percolates() returns wrong value after 1412 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = jerry47.txt
    - percolates() returns wrong value after 1076 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = sedgewick60.txt
    - percolates() returns wrong value after 1577 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = wayne98.txt
    - percolates() returns wrong value after 3851 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 17: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
    - percolates() returns wrong value after 3 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input4.txt
    - percolates() returns wrong value after 4 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input7.txt
    - percolates() returns wrong value after 12 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 18: call all methods in random order until all sites are open,
         allowing isOpen() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 3 of 40

  * n = 5
    - percolates() returns wrong value after 12 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 3 of 20

  * n = 7
    - percolates() returns wrong value after 28 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10
    - percolates() returns wrong value after 54 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20
  * n = 50
    - percolates() returns wrong value after 1423 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED


Total: 7/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference percolation.Percolation)
********************************************************************************

Testing correctness of percolation.PercolationStats
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check that methods in percolation.PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: check that mean() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 3: check that stddev() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 4: check that percolation.PercolationStats creates trials percolation.Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 5: check that percolation.PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that percolation.PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 8: check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
  * n = -2147483648, trials = -2147483648
==> passed

Test 11: create two percolation.PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 12: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 13: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 14: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed

Test 15: check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 15/15 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference percolation.Percolation)
********************************************************************************

Analyzing memory of percolation.PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> passed       16           48
=> passed       32           48
=> passed       64           48
=> passed      128           48
==> 4/4 tests passed


Estimated student memory = 48.00   (R^2 = 1.000)

Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference percolation.Percolation)
********************************************************************************

Timing percolation.PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: count calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: count calls to methods in StdRandom
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: count calls to methods in percolation.Percolation
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call percolation.PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       724     0.15       2.6
      1024     0.30       1.9
      1448     0.82       2.9
      2048     2.09       2.7
      2896     4.95       2.5
==> passed


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of percolation.Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.


Total: 0/4 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing percolation.Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.


Total: 0/16 tests passed: Could not complete tests, which results in a reported score of 0.
