See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 1 warning)
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  33/43 tests passed
Memory:       48/50 tests passed
Timing:       87/193 tests passed

Aggregate score: 74.66%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.6K Jan 26 02:10 queues.Deque.java
 668 Jan 26 02:10 queues.Permutation.java
4.5K Jan 26 02:10 queues.RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 queues.Deque.java
*-----------------------------------------------------------

% javac11 queues.RandomizedQueue.java
*-----------------------------------------------------------
queues.RandomizedQueue.java:96: warning: [unchecked] unchecked cast
            items = (Item[]) new Object[size];
                             ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class queues.RandomizedQueue
1 warning

% javac11 queues.Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
queues.Deque:

queues.RandomizedQueue:

queues.Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for queues.Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for queues.RandomizedQueue.java
*-----------------------------------------------------------
[INFO] queues.RandomizedQueue.java:69: Using a loop in this method might be a performance bug. [Performance]
[INFO] queues.RandomizedQueue.java:112: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for queues.Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of queues.Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:460)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addFirst(2)
         deque.removeFirst()

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:461)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test2(TestDeque.java:462)
    TestDeque.main(TestDeque.java:850)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()

==> FAILED

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:472)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:475)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:476)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:477)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addFirst(2)
         deque.removeLast()

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:478)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addFirst(2)
         deque.removeLast()

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:490)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.removeLast()

  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:491)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(3)
         deque.isEmpty()         ==> false
         deque.removeLast()

  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:492)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.removeLast()

  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:493)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.removeLast()

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test4(TestDeque.java:494)
    TestDeque.main(TestDeque.java:852)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.removeLast()

==> FAILED

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:507)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(3)
         deque.removeFirst()

  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:508)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.removeFirst()

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:509)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:510)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.isEmpty()         ==> false
         deque.isEmpty()         ==> false
         deque.removeFirst()

==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:522)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.size()            ==> 1
         deque.removeFirst()

  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:525)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:526)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:527)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.size()            ==> 0
         deque.addLast(2)
         deque.removeLast()

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:528)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         queues.Deque<Integer> deque = new queues.Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.size()            ==> 0
         deque.addFirst(3)
         deque.removeLast()

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two queues.Deque objects can be created at the same time
  * n = 10

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.checkTwoDequeObjects(TestDeque.java:192)
    TestDeque.test8(TestDeque.java:590)
    TestDeque.main(TestDeque.java:856)

  * n = 1000

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.checkTwoDequeObjects(TestDeque.java:192)
    TestDeque.test8(TestDeque.java:591)
    TestDeque.main(TestDeque.java:856)

==> FAILED

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
  * m = 50
  * m = 100
  * m = 1000

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TestDeque.checkIteratorAfterIntermixedOperations(TestDeque.java:260)
    TestDeque.test10(TestDeque.java:630)
    TestDeque.main(TestDeque.java:858)

    - sequence of operations was:
         queues.Deque deque<Integer> = new queues.Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create queues.Deque objects of different parameterized types

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TestDeque.test13(TestDeque.java:661)
    TestDeque.main(TestDeque.java:861)

==> FAILED

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 8/16 tests passed!


================================================================
Testing correctness of queues.RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create queues.RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC      1349    2000.0      -1062.43
              ACB      2668    2000.0       1537.74
              BAC      2610    2000.0       1389.58
              BCA      1291    2000.0      -1130.22
              CAB      1345    2000.0      -1067.27
              CBA      2737    2000.0       1717.28
        -------------------------------------------
                      12000   12000.0       1384.68

    G-statistic = 1384.68 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD       202     500.0       -366.16
             ABDC       543     500.0         89.60
             ACBD       367     500.0       -226.99
             ACDB       382     500.0       -205.66
             ADBC       354     500.0       -244.48
             ADCB      1132     500.0       1849.99
             BACD       398     500.0       -181.61
             BADC      1108     500.0       1763.28
             BCAD       573     500.0        156.17
             BCDA       176     500.0       -367.53
             BDAC       403     500.0       -173.83
             BDCA       358     500.0       -239.20
             CABD       350     500.0       -249.67
             CADB       354     500.0       -244.48
             CBAD      1157     500.0       1941.39
             CBDA       372     500.0       -220.01
             CDAB       215     500.0       -362.91
             CDBA       599     500.0        216.42
             DABC       162     500.0       -365.15
             DACB       550     500.0        104.84
             DBAC       354     500.0       -244.48
             DBCA       364     500.0       -231.11
             DCAB       354     500.0       -244.48
             DCBA      1173     500.0       2000.46
        -------------------------------------------
                      12000   12000.0       3954.41

    G-statistic = 3954.41 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==> FAILED

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - throws wrong exception when calling next() when iterator is exhausted
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 16/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference queues.RandomizedQueue and queues.Deque)
********************************************************************************

Testing correctness of queues.Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java queues.Permutation 3 < distinct.txt
  A
  G
  C

  % java queues.Permutation 3 < distinct.txt
  G
  C
  B

  % java queues.Permutation 8 < duplicates.txt
  AA
  BB
  CC
  BB
  BB
  BB
  CC
  BB

==> passed

Test 1b: check formatting for other inputs
  % java queues.Permutation 8 < mediumTale.txt
  times
  the
  it
  times
  wisdom
  of
  it
  it

  % java queues.Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference queues.RandomizedQueue and queues.Deque)
********************************************************************************

Timing queues.Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java queues.Permutation 5 < distinct.txt
    - main() should call readString() once per string
    - number of strings            = 9
    - number of readString() calls = 10

  * java queues.Permutation 10 < permutation10.txt
    - main() should call readString() once per string
    - number of strings            = 10
    - number of readString() calls = 11

  * java queues.Permutation 1 < mediumTale.txt
    - main() should call readString() once per string
    - number of strings            = 24
    - number of readString() calls = 25

  * java queues.Permutation 20 < tale.txt
    - main() should call readString() once per string
    - number of strings            = 138653
    - number of readString() calls = 138654

  * java queues.Permutation 100 < tale.txt
    - main() should call readString() once per string
    - number of strings            = 138653
    - number of readString() calls = 138654

  * java queues.Permutation 16412 < tale.txt
    - main() should call readString() once per string
    - number of strings            = 138653
    - number of readString() calls = 138654

==> FAILED

Test 2: count calls to methods in queues.Deque and queues.RandomizedQueue
  * java queues.Permutation 5 < distinct.txt
  * java queues.Permutation 10 < permutation10.txt
  * java queues.Permutation 1 < mediumTale.txt
  * java queues.Permutation 20 < tale.txt
  * java queues.Permutation 100 < tale.txt
  * java queues.Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java queues.Permutation 5 < distinct.txt
  * java queues.Permutation 10 < permutation10.txt
  * java queues.Permutation 1 < mediumTale.txt
  * java queues.Permutation 20 < tale.txt
  * java queues.Permutation 100 < tale.txt
  * java queues.Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.00
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.04
=> passed      256000     0.08
=> passed      512000     0.22
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.03
=> passed      128000     0.03
=> passed      256000     0.06
=> passed      512000     0.12
==> 10/10 tests passed


Total: 22/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of queues.Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one queues.Deque or queues.RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any queues.Deque or queues.RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or queues.Deque or queues.RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of queues.RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of queues.RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of queues.RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of queues.RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of queues.RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of queues.Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a queues.Deque
containing n items is 48n + 192.

Running 48 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=> passed       32         1576
=> passed       64         3112
=> passed      128         6184
=> passed      256        12328
=> passed      512        24616
=> passed     1024        49192
=> passed     2048        98344
=> passed     4096       196648
=> passed     8192       393256
==> 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1624
=> passed       65         3160
=> passed      129         6232
=> passed      257        12376
=> passed      513        24664
=> passed     1025        49240
=> passed     2049        98392
=> passed     4097       196696
=> passed     8193       393304
==> 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1624
=> passed       65         3160
=> passed      129         6232
=> passed      257        12376
=> passed      513        24664
=> passed     1025        49240
=> passed     2049        98392
=> passed     4097       196696
=> passed     8193       393304
==> 9/9 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           88
=> passed       64           88
=> passed      128           88
=> passed      256           88
=> passed      512           88
=> passed     1024           88
=> passed     2048           88
=> passed     4096           88
=> passed     8192           88
==> 9/9 tests passed

Memory: 88.00   (R^2 = 1.000)


Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:422)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:423)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:424)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:372)
    MemoryOfDeque.test6a(MemoryOfDeque.java:425)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    MemoryOfDeque.loiterInsertionsBeforeDeletions(MemoryOfDeque.java:371)
    MemoryOfDeque.test6a(MemoryOfDeque.java:426)
    MemoryOfDeque.main(MemoryOfDeque.java:655)

==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    MemoryOfDeque.loiter(MemoryOfDeque.java:481)
    MemoryOfDeque.test6b(MemoryOfDeque.java:543)
    MemoryOfDeque.main(MemoryOfDeque.java:656)

    - sequence of operations was:
         deque.addFirst("VWYDODQEVJ")
         deque.removeLast()

  * 100 random operations (0.2, 0.2, 0.3, 0.3)

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    MemoryOfDeque.loiter(MemoryOfDeque.java:481)
    MemoryOfDeque.test6b(MemoryOfDeque.java:544)
    MemoryOfDeque.main(MemoryOfDeque.java:656)

    - sequence of operations was:
         deque.addLast("POUIJEMWOY")
         deque.removeLast()

==> FAILED

Test 7: worst-case constant memory allocated or de-allocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed


Min observed memory for queues.Deque: 48.00 n + 40.00   (R^2 = 1.000)
Max observed memory for queues.Deque: 48.00 n + 40.00   (R^2 = 1.000)

Total: 46/48 tests passed!


================================================================



Analyzing memory of queues.RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a queues.RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1312
=> passed       64         2592
=> passed      128         5152
=> passed      256        10272
=> passed      512        20512
=> passed     1024        40992
=> passed     2048        81952
=> passed     4096       163872
=> passed     8192       327712
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1352
=> passed       65         2632
=> passed      129         5192
=> passed      257        10312
=> passed      513        20552
=> passed     1025        41032
=> passed     2049        81992
=> passed     4097       163912
=> passed     8193       327752
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1352
=> passed       65         2632
=> passed      129         5192
=> passed      257        10312
=> passed      513        20552
=> passed     1025        41032
=> passed     2049        81992
=> passed     4097       163912
=> passed     8193       327752
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32         1312
=> passed       64         2592
=> passed      128         5152
=> passed      256        10272
=> passed      512        20512
=> passed     1024        40992
=> passed     2048        81952
=> passed     4096       163872
=> passed     8192       327712
==> 9/9 tests passed

Memory: 40.00 n + 32.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32           72
=> passed       64           72
=> passed      128           72
=> passed      256           72
=> passed      512           72
=> passed     1024           72
=> passed     2048           72
=> passed     4096           72
=> passed     8192           72
==> 9/9 tests passed

Memory: 72.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32          320
=> passed       64          576
=> passed      128         1088
=> passed      256         2112
=> passed      512         4160
=> passed     1024         8256
=> passed     2048        16448
=> passed     4096        32832
=> passed     8192        65600
==> 9/9 tests passed

Memory: 8.00 n + 64.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0

    ProgramPerformanceLimits.<init>(ProgramPerformanceLimits.java:72)
    MemoryOfRandomizedQueue.printTable(MemoryOfRandomizedQueue.java:84)
    MemoryOfRandomizedQueue.test9(MemoryOfRandomizedQueue.java:640)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:744)

Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------


WARNING: the time limit of 60 seconds was exceeded, so not all tests could be completed.

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing queues.Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test1(TimeDeque.java:220)
    TimeDeque.main(TimeDeque.java:366)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test2(TimeDeque.java:226)
    TimeDeque.main(TimeDeque.java:369)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test3(TimeDeque.java:232)
    TimeDeque.main(TimeDeque.java:372)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeAddRemove(TimeDeque.java:25)
    TimeDeque.timeAddRemove(TimeDeque.java:46)
    TimeDeque.test4(TimeDeque.java:238)
    TimeDeque.main(TimeDeque.java:375)

=> FAILED        1024   [ Test did not complete due to an exception. ]

==> 0/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeRandomOperations(TimeDeque.java:98)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test5(TimeDeque.java:251)
    TimeDeque.main(TimeDeque.java:378)

=> FAILED        1024   Test did not complete due to an exception.

==> 0/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00

    java.lang.NullPointerException

    queues.Deque.removeLast(queues.Deque.java:73)
    TimeDeque.timeRandomOperations(TimeDeque.java:107)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test6(TimeDeque.java:264)
    TimeDeque.main(TimeDeque.java:381)

=> FAILED        2048   Test did not complete due to an exception.

==> 1/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------

    java.lang.NullPointerException

    queues.Deque.removeFirst(queues.Deque.java:61)
    TimeDeque.timeRandomOperations(TimeDeque.java:98)
    TimeDeque.timeRandomOperations(TimeDeque.java:191)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=> FAILED        1024   Test did not complete due to an exception.

==> 0/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.02
=> passed     2048000     0.05
==> 12/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed        8193     0.00
=> passed       16385     0.00
=> passed       32769     0.00
=> passed       65537     0.01
=> passed      128001     0.01
=> passed      256001     0.02
=> passed      512001     0.03
=> passed     1024001     0.31
==> 11/11 tests passed

Total: 24/103 tests passed!


================================================================



Timing queues.RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.05
=> passed       16384     0.19
=> passed       32768     0.81
=> FAILED       65536     4.12
   [ Most likely one of your operations is not constant time. ]

==> 6/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.03
=> passed       16384     0.11
=> passed       32768     0.50
=> FAILED       65536     2.21
   [ Most likely one of your operations is not constant time. ]

==> 6/11 tests passed


Test 6a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.01
=> passed       16384     0.05
=> passed       32768     0.27
=> FAILED       65536     1.20
   [ Most likely one of your operations is not constant time. ]

==> 6/11 tests passed


Test 7a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.01
=> passed        8192     0.04
=> passed       16384     0.17
=> passed       32768     0.75
=> FAILED       65536     3.43
   [ Most likely one of your operations is not constant time. ]

==> 6/11 tests passed


Test 8a-k: make n calls to enqueue() followed by n calls each to
           next() and hasNext().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.01
=> passed       32768     0.01
=> passed       65536     0.04
=> passed      128000     0.06
=> passed      256000     0.23
=> passed      512000     0.56
=> FAILED     1024000     1.85
   [ Most likely one of your operations is not constant time. ]

==> 10/11 tests passed


Test 9a-i: make n calls to enqueue(); then call dequeue() twice,
           followed by enqueue() twice and repeat n times.

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.02
=> passed        4097     0.07
=> passed        8193     0.28
=> FAILED       16385     1.13
   [ Most likely one of your operations is not constant time. ]

==> 4/9 tests passed


Total: 41/67 tests passed!


================================================================
